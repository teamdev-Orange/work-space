//効果音

// 落下スピード


// 1ブロックの大きさ


// フィールドのサイズ


// キャンバスIDの取得



// 2dコンテキストの取得



// キャンバスサイズ（＝プレイ画面のサイズ）



// テトリミノの1辺の最長



// 7種類のテトリミノ達


// TETRO_TYPESのインデックス番号をランダム取得


// テトロミノを取得する



// テトリミノの移動距離



// 画面本体
const SCREEN = [];


// タイマーID



// ゲームオーバーフラグ
let isGameOver = false




// テトリスプレイ画面描画処理

 // 背景色を指定

 // キャンバスを塗りつぶす

 // 画面本体で動かせなくなったテトリミノを描画する

  // 画面本体の高さ分繰り返す

  // 画面本体の幅分繰り返す

  // 画面本体の座標にブロックがある場合

  // ブロックを描画する


// テトリミノを描画する




// ゲームオーバー時のメッセージ
if (isGameOver) {
  const GAME_OVER_MESSAGE = "GAME OVER";
  CANVAS_2D.font = "40px 'dotgothic16";
  const width = CANVAS_2D.measureText(GAME_OVER_MESSAGE).width;
  const x = CANVAS_WIDTH / 2 - width / 2;
  const y = CANVAS_HEIGHT / 2 - 20;
  CANVAS_2D.fillStyle = "black";
  CANVAS_2D.fillText(GAME_OVER_MESSAGE, x, y);
  gameSound.pause();
  gameOverSound.play();
}



// ブロックを描画する



  // 塗りに赤を設定

   // 線の色を黒に設定



// テトリミノが動けるかどうか判定する

   // 現在のテトリミノの位置（tetroMinoDistanceX + x）に移動分を加える（＝移動後の座標）


   // 移動先にブロックがあるか判定


// 右回転

   //回転後の新しいテトリミノ用配列


// 左回転

   //回転後の新しいテトリミノ用配列


// キーボード入力



// HTMLのボタン要素に対応するIDを指定




// ボタンをクリックしたときの処理を定義



// テトリミノを固定する



// そろった行を消す

  // 一列になっている場所をスクリーン上から調べていく

   // 行を消すフラグを立てる

   // 行に0が入っている（＝そろっていない）かを調べていく

    // そろった行から上へ向かってforループしていく

     // 一列上の情報をコピーする


// 消したライン数


// スコア計算結果
let result = 0;

// スコアを計算する関数
function calculateScore(lineCount) {
  result = lineCount * 100;
}


// スコアと消したライン数の表示を行う関数
function drawInfo() {
  // ここでメソットごと代入するとループ2回まわるので変数で代入
  document.getElementById("scoreCount").innerHTML = result;
  document.getElementById("lineCount").innerHTML = lineCount;
}


 // 落下処理

  // 下に移動できるか判定

  // 下に移動


  // 下に移動できない場合

   // テトリミノを固定する

   // そろった行を消す

   // テトリミノの種類をランダムに取得

   // テトリミノを取得する
       // テトリミノの初期位置を設定する
   // 次のテトリミノを出せなくなったらゲームオーバー
   
         // ゲームオーバーフラグを立てる
     // テトリミノが動けるか判定
    

// 画面を真ん中にする
   // ボードの幅をキャンバスの幅に合わせる


// テトリミノの初期位置を設定する




// ゲームスタート時の初期化

 // ゲームオーバー状態から再スタートする場合



// ゲームリスタート時の初期化


// Pauseボタンの取得



// ポーズ状態のフラグ


// Pauseボタンがクリックされたときの処理


  // ゲームがポーズ中なら再開

  // タイマー再開

  // ゲームが実行中ならポーズ

  // タイマー停止


// 初期化処理



  // ポーズ状態をリセット



  // 落下処理実行



// reInit関数

  // ゲームオーバー状態をリセット

  // 画面本体の初期化


// テトリミノのランダムな選択

    // 位置の初期化


     // 画面を再描画
  
  // 消したライン数をリセット
  
  // スコアをリセット
  
  // スコアと消したライン数の表示をリセット
  
  // ポーズ状態をリセット

  // ポーズボタンの表示をリセット
  
  // ゲームスタート時の音を再生


// モーダルが開かれたときの処理 (JQueryを使用)



// モーダルが閉じたときの処理 (JQueryを使用)


        // ゲームオーバーでなければ、ゲームのタイマーを再開



// ミュートボタン



// ゲームサウンドの初期ミュート状態を保持



// ミュートボタンのテキストとアイコンを切り替える関数



// ミュートボタンがクリックされたときにミュートをトグル













